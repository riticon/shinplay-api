// Code generated by ent, DO NOT EDIT.

package otp

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/shinplay/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.OTP {
	return predicate.OTP(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.OTP {
	return predicate.OTP(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.OTP {
	return predicate.OTP(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.OTP {
	return predicate.OTP(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.OTP {
	return predicate.OTP(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.OTP {
	return predicate.OTP(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.OTP {
	return predicate.OTP(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.OTP {
	return predicate.OTP(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.OTP {
	return predicate.OTP(sql.FieldLTE(FieldID, id))
}

// Otp applies equality check predicate on the "otp" field. It's identical to OtpEQ.
func Otp(v string) predicate.OTP {
	return predicate.OTP(sql.FieldEQ(FieldOtp, v))
}

// ExpiresAt applies equality check predicate on the "expires_at" field. It's identical to ExpiresAtEQ.
func ExpiresAt(v time.Time) predicate.OTP {
	return predicate.OTP(sql.FieldEQ(FieldExpiresAt, v))
}

// OtpEQ applies the EQ predicate on the "otp" field.
func OtpEQ(v string) predicate.OTP {
	return predicate.OTP(sql.FieldEQ(FieldOtp, v))
}

// OtpNEQ applies the NEQ predicate on the "otp" field.
func OtpNEQ(v string) predicate.OTP {
	return predicate.OTP(sql.FieldNEQ(FieldOtp, v))
}

// OtpIn applies the In predicate on the "otp" field.
func OtpIn(vs ...string) predicate.OTP {
	return predicate.OTP(sql.FieldIn(FieldOtp, vs...))
}

// OtpNotIn applies the NotIn predicate on the "otp" field.
func OtpNotIn(vs ...string) predicate.OTP {
	return predicate.OTP(sql.FieldNotIn(FieldOtp, vs...))
}

// OtpGT applies the GT predicate on the "otp" field.
func OtpGT(v string) predicate.OTP {
	return predicate.OTP(sql.FieldGT(FieldOtp, v))
}

// OtpGTE applies the GTE predicate on the "otp" field.
func OtpGTE(v string) predicate.OTP {
	return predicate.OTP(sql.FieldGTE(FieldOtp, v))
}

// OtpLT applies the LT predicate on the "otp" field.
func OtpLT(v string) predicate.OTP {
	return predicate.OTP(sql.FieldLT(FieldOtp, v))
}

// OtpLTE applies the LTE predicate on the "otp" field.
func OtpLTE(v string) predicate.OTP {
	return predicate.OTP(sql.FieldLTE(FieldOtp, v))
}

// OtpContains applies the Contains predicate on the "otp" field.
func OtpContains(v string) predicate.OTP {
	return predicate.OTP(sql.FieldContains(FieldOtp, v))
}

// OtpHasPrefix applies the HasPrefix predicate on the "otp" field.
func OtpHasPrefix(v string) predicate.OTP {
	return predicate.OTP(sql.FieldHasPrefix(FieldOtp, v))
}

// OtpHasSuffix applies the HasSuffix predicate on the "otp" field.
func OtpHasSuffix(v string) predicate.OTP {
	return predicate.OTP(sql.FieldHasSuffix(FieldOtp, v))
}

// OtpEqualFold applies the EqualFold predicate on the "otp" field.
func OtpEqualFold(v string) predicate.OTP {
	return predicate.OTP(sql.FieldEqualFold(FieldOtp, v))
}

// OtpContainsFold applies the ContainsFold predicate on the "otp" field.
func OtpContainsFold(v string) predicate.OTP {
	return predicate.OTP(sql.FieldContainsFold(FieldOtp, v))
}

// ExpiresAtEQ applies the EQ predicate on the "expires_at" field.
func ExpiresAtEQ(v time.Time) predicate.OTP {
	return predicate.OTP(sql.FieldEQ(FieldExpiresAt, v))
}

// ExpiresAtNEQ applies the NEQ predicate on the "expires_at" field.
func ExpiresAtNEQ(v time.Time) predicate.OTP {
	return predicate.OTP(sql.FieldNEQ(FieldExpiresAt, v))
}

// ExpiresAtIn applies the In predicate on the "expires_at" field.
func ExpiresAtIn(vs ...time.Time) predicate.OTP {
	return predicate.OTP(sql.FieldIn(FieldExpiresAt, vs...))
}

// ExpiresAtNotIn applies the NotIn predicate on the "expires_at" field.
func ExpiresAtNotIn(vs ...time.Time) predicate.OTP {
	return predicate.OTP(sql.FieldNotIn(FieldExpiresAt, vs...))
}

// ExpiresAtGT applies the GT predicate on the "expires_at" field.
func ExpiresAtGT(v time.Time) predicate.OTP {
	return predicate.OTP(sql.FieldGT(FieldExpiresAt, v))
}

// ExpiresAtGTE applies the GTE predicate on the "expires_at" field.
func ExpiresAtGTE(v time.Time) predicate.OTP {
	return predicate.OTP(sql.FieldGTE(FieldExpiresAt, v))
}

// ExpiresAtLT applies the LT predicate on the "expires_at" field.
func ExpiresAtLT(v time.Time) predicate.OTP {
	return predicate.OTP(sql.FieldLT(FieldExpiresAt, v))
}

// ExpiresAtLTE applies the LTE predicate on the "expires_at" field.
func ExpiresAtLTE(v time.Time) predicate.OTP {
	return predicate.OTP(sql.FieldLTE(FieldExpiresAt, v))
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.OTP {
	return predicate.OTP(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.OTP {
	return predicate.OTP(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.OTP) predicate.OTP {
	return predicate.OTP(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.OTP) predicate.OTP {
	return predicate.OTP(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.OTP) predicate.OTP {
	return predicate.OTP(sql.NotPredicates(p))
}
