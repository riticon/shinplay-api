// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/shinplay/ent/otp"
	"github.com/shinplay/ent/user"
)

// OTP is the model entity for the OTP schema.
type OTP struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// Otp holds the value of the "otp" field.
	Otp string `json:"otp,omitempty"`
	// ExpiresAt holds the value of the "expires_at" field.
	ExpiresAt time.Time `json:"expires_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the OTPQuery when eager-loading is set.
	Edges        OTPEdges `json:"edges"`
	user_otps    *int
	selectValues sql.SelectValues
}

// OTPEdges holds the relations/edges for other nodes in the graph.
type OTPEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e OTPEdges) UserOrErr() (*User, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*OTP) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case otp.FieldID:
			values[i] = new(sql.NullInt64)
		case otp.FieldOtp:
			values[i] = new(sql.NullString)
		case otp.FieldCreateTime, otp.FieldUpdateTime, otp.FieldExpiresAt:
			values[i] = new(sql.NullTime)
		case otp.ForeignKeys[0]: // user_otps
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the OTP fields.
func (o *OTP) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case otp.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			o.ID = int(value.Int64)
		case otp.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				o.CreateTime = value.Time
			}
		case otp.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				o.UpdateTime = value.Time
			}
		case otp.FieldOtp:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field otp", values[i])
			} else if value.Valid {
				o.Otp = value.String
			}
		case otp.FieldExpiresAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field expires_at", values[i])
			} else if value.Valid {
				o.ExpiresAt = value.Time
			}
		case otp.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_otps", value)
			} else if value.Valid {
				o.user_otps = new(int)
				*o.user_otps = int(value.Int64)
			}
		default:
			o.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the OTP.
// This includes values selected through modifiers, order, etc.
func (o *OTP) Value(name string) (ent.Value, error) {
	return o.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the OTP entity.
func (o *OTP) QueryUser() *UserQuery {
	return NewOTPClient(o.config).QueryUser(o)
}

// Update returns a builder for updating this OTP.
// Note that you need to call OTP.Unwrap() before calling this method if this OTP
// was returned from a transaction, and the transaction was committed or rolled back.
func (o *OTP) Update() *OTPUpdateOne {
	return NewOTPClient(o.config).UpdateOne(o)
}

// Unwrap unwraps the OTP entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (o *OTP) Unwrap() *OTP {
	_tx, ok := o.config.driver.(*txDriver)
	if !ok {
		panic("ent: OTP is not a transactional entity")
	}
	o.config.driver = _tx.drv
	return o
}

// String implements the fmt.Stringer.
func (o *OTP) String() string {
	var builder strings.Builder
	builder.WriteString("OTP(")
	builder.WriteString(fmt.Sprintf("id=%v, ", o.ID))
	builder.WriteString("create_time=")
	builder.WriteString(o.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(o.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("otp=")
	builder.WriteString(o.Otp)
	builder.WriteString(", ")
	builder.WriteString("expires_at=")
	builder.WriteString(o.ExpiresAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// OTPs is a parsable slice of OTP.
type OTPs []*OTP
