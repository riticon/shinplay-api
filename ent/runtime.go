// Code generated by ent, DO NOT EDIT.

package ent

import (
	"time"

	"github.com/shinplay/ent/otp"
	"github.com/shinplay/ent/schema"
	"github.com/shinplay/ent/user"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	otpFields := schema.OTP{}.Fields()
	_ = otpFields
	// otpDescOtp is the schema descriptor for otp field.
	otpDescOtp := otpFields[0].Descriptor()
	// otp.DefaultOtp holds the default value on creation for the otp field.
	otp.DefaultOtp = otpDescOtp.Default.(func() string)
	// otp.OtpValidator is a validator for the "otp" field. It is called by the builders before save.
	otp.OtpValidator = func() func(string) error {
		validators := otpDescOtp.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(otp string) error {
			for _, fn := range fns {
				if err := fn(otp); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// otpDescExpiresAt is the schema descriptor for expires_at field.
	otpDescExpiresAt := otpFields[1].Descriptor()
	// otp.DefaultExpiresAt holds the default value on creation for the expires_at field.
	otp.DefaultExpiresAt = otpDescExpiresAt.Default.(time.Time)
	userMixin := schema.User{}.Mixin()
	userMixinFields0 := userMixin[0].Fields()
	_ = userMixinFields0
	userMixinFields1 := userMixin[1].Fields()
	_ = userMixinFields1
	userFields := schema.User{}.Fields()
	_ = userFields
	// userDescCreateTime is the schema descriptor for create_time field.
	userDescCreateTime := userMixinFields0[0].Descriptor()
	// user.DefaultCreateTime holds the default value on creation for the create_time field.
	user.DefaultCreateTime = userDescCreateTime.Default.(func() time.Time)
	// userDescUpdateTime is the schema descriptor for update_time field.
	userDescUpdateTime := userMixinFields1[0].Descriptor()
	// user.DefaultUpdateTime holds the default value on creation for the update_time field.
	user.DefaultUpdateTime = userDescUpdateTime.Default.(func() time.Time)
	// user.UpdateDefaultUpdateTime holds the default value on update for the update_time field.
	user.UpdateDefaultUpdateTime = userDescUpdateTime.UpdateDefault.(func() time.Time)
	// userDescAuthID is the schema descriptor for auth_id field.
	userDescAuthID := userFields[0].Descriptor()
	// user.DefaultAuthID holds the default value on creation for the auth_id field.
	user.DefaultAuthID = userDescAuthID.Default.(func() string)
	// user.AuthIDValidator is a validator for the "auth_id" field. It is called by the builders before save.
	user.AuthIDValidator = func() func(string) error {
		validators := userDescAuthID.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(auth_id string) error {
			for _, fn := range fns {
				if err := fn(auth_id); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// userDescUsername is the schema descriptor for username field.
	userDescUsername := userFields[1].Descriptor()
	// user.UsernameValidator is a validator for the "username" field. It is called by the builders before save.
	user.UsernameValidator = userDescUsername.Validators[0].(func(string) error)
	// userDescPhoneNumber is the schema descriptor for phone_number field.
	userDescPhoneNumber := userFields[3].Descriptor()
	// user.PhoneNumberValidator is a validator for the "phone_number" field. It is called by the builders before save.
	user.PhoneNumberValidator = func() func(string) error {
		validators := userDescPhoneNumber.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(phone_number string) error {
			for _, fn := range fns {
				if err := fn(phone_number); err != nil {
					return err
				}
			}
			return nil
		}
	}()
}
